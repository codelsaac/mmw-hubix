generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ------------------
//  AUTHENTICATION
// ------------------

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String? @db.Text
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?   @db.VarChar(2048)
  role          UserRole  @default(GUEST)
  department    String?
  permissions   String?   @db.Text
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?

  accounts Account[]
  sessions Session[]

  createdResources         Resource[]
  createdPublicEvents      PublicEvent[]
  createdInternalEvents    InternalEvent[]    @relation("CreatedInternalEvents")
  createdTrainingResources TrainingResource[]
  createdCategories        Category[]

  createdActivities    Activity[]     @relation("CreatedActivities")
  assignedActivities   Activity[]     @relation("AssignedActivities")
  createdTasks         Task[]         @relation("CreatedTasks")
  assignedTasks        Task[]         @relation("AssignedTasks")
  createdAnnouncements Announcement[]
  createdArticles      Article[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  ADMIN
  HELPER
  GUEST
}

// ------------------
//  APP CONTENT
// ------------------

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?  @db.Text
  icon        String?  // Icon name for the category
  color       String?  // Color code for the category
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creator   User?      @relation(fields: [createdBy], references: [id])
  resources Resource[]
}

model Resource {
  id          String   @id @default(cuid())
  name        String
  url         String   @db.VarChar(2048)
  description String?  @db.Text
  categoryId  String?
  status      String   @default("active")
  clicks      Int      @default(0)
  createdBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category Category? @relation(fields: [categoryId], references: [id])
  creator  User?     @relation(fields: [createdBy], references: [id])
}

model PublicEvent {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  startTime   DateTime
  endTime     DateTime
  location    String?
  eventType   String   @default("general")
  isVisible   Boolean  @default(true)
  createdBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creator User? @relation(fields: [createdBy], references: [id])
}

model InternalEvent {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  startTime   DateTime
  endTime     DateTime
  location    String?
  eventType   String?
  attendees   Json?
  createdBy   String?
  creator     User?    @relation("CreatedInternalEvents", fields: [createdBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Activity {
  id          String   @id @default(cuid())
  type        String
  title       String
  description String   @db.Text
  status      String   @default("new")
  priority    String   @default("medium")
  assignedTo  String?
  createdBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  assignee User? @relation("AssignedActivities", fields: [assignedTo], references: [id])
  creator  User? @relation("CreatedActivities", fields: [createdBy], references: [id])
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  dueDate     DateTime
  priority    String   @default("medium")
  status      String   @default("pending")
  assignedTo  String?
  createdBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  assignee User? @relation("AssignedTasks", fields: [assignedTo], references: [id])
  creator  User? @relation("CreatedTasks", fields: [createdBy], references: [id])

  @@index([status, priority, dueDate])
}

model TrainingResource {
  id          String              @id @default(cuid())
  title       String
  description String?             @db.Text
  contentType ResourceContentType

  videoUrl    String? @db.VarChar(2048)
  duration    Int?
  textContent String? @db.LongText
  fileName    String? @db.VarChar(255)
  fileUrl     String? @db.VarChar(2048)
  fileSize    Int?
  mimeType    String?

  tags        String? @db.Text    // JSON array of tags
  difficulty  String?
  instructor  String?
  views       Int      @default(0)
  isPublic    Boolean  @default(false)
  createdBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creator User? @relation(fields: [createdBy], references: [id])
}

enum ResourceContentType {
  VIDEO
  TEXT
  FILE
}

model Announcement {
  id           String   @id @default(cuid())
  title        String
  club         String
  date         DateTime
  time         String
  location     String?
  description  String?  @db.Text
  maxAttendees Int?
  attendees    Int      @default(0)
  type         String   @default("general")
  status       String   @default("active")
  isPublic     Boolean  @default(true)
  createdBy    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  creator       User?                   @relation(fields: [createdBy], references: [id])
  registrations ActivityRegistration[]
}

model ActivityRegistration {
  id             String       @id @default(cuid())
  announcementId String
  studentName    String
  studentEmail   String?
  studentPhone   String?
  studentClass   String?      // e.g., "Form 1A", "F.2B"
  studentNumber  String?      // Student ID number
  message        String?      @db.Text
  status         String       @default("pending") // pending, approved, rejected
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  announcement Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  @@index([announcementId])
  @@index([status])
}

model Article {
  id            String        @id @default(cuid())
  title         String
  slug          String        @unique
  content       String        @db.LongText
  excerpt       String?       @db.Text
  status        ArticleStatus @default(DRAFT)
  isPublic      Boolean       @default(true)
  publishedAt   DateTime?
  views         Int           @default(0)
  tags          String?       @db.Text
  category      String?
  featuredImage String?       @db.VarChar(2048)
  createdBy     String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  creator User? @relation(fields: [createdBy], references: [id])

  @@index([status, publishedAt])
  @@index([slug])
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model TeamNotes {
  id        String   @id @default(cuid())
  content   String   @db.LongText
  updatedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String               @id @default(cuid())
  title     String
  message   String               @db.Text
  type      NotificationType     @default(INFO)
  priority  NotificationPriority @default(NORMAL)
  isRead    Boolean              @default(false)
  userId    String?
  link      String?              @db.VarChar(2048)
  metadata  String?              @db.Text
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  @@index([userId, isRead, createdAt])
  @@index([createdAt])
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  ANNOUNCEMENT
  SYSTEM
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model SiteSetting {
  id        String      @id @default(cuid())
  key       String      @unique
  value     String      @db.Text
  category  String      @default("general")
  label     String?
  type      SettingType @default(STRING)
  isPublic  Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([category])
  @@index([key])
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}
