{
  "meta": {
    "project": "MMW Hubix - School Information Portal",
    "date": "2025-10-17",
    "prepared_by": "Software Development Manager"
  },
  "product_overview": "MMW Hubix is a modern and centralized web portal designed for C.C.C. Mong Man Wai College to consolidate essential school information, resources, and tools for students, teachers, and IT administrators. It serves both public users and internal IT prefect teams, offering a dynamic resource hub, AI assistant, event management, training library, and comprehensive admin console with advanced user and content management capabilities.",
  "core_goals": [
    "Provide a unified platform replacing outdated systems for school information and resources.",
    "Enable easy access to curated school resources organized by dynamic categories for public users without login.",
    "Offer conversational AI assistance for campus navigation, schedules, policies, and IT support.",
    "Facilitate internal IT prefect team collaboration through dashboards, task management, event calendars, and training libraries.",
    "Empower administrators with full control over users, categories, resources, articles, and system settings via a secure admin console.",
    "Ensure a responsive, modern, and accessible user experience across devices.",
    "Implement robust role-based access control and secure authentication for internal users."
  ],
  "key_features": [
    "Resource Hub with dynamic categories, smart search, click tracking, and enhanced UI animations.",
    "AI Assistant chatbot accessible via floating pulsating button with conversational UI and smooth transitions.",
    "Club Announcements public posting system with RSVP and progress tracking.",
    "User profile and settings management including secure password change and theme preferences.",
    "IT Prefect System including team dashboard, internal calendars, training library, task and event management.",
    "Admin Console with full CRUD operations on users, categories, resources, articles, system settings, and analytics.",
    "Role-based access with ADMIN, HELPER, and GUEST roles and protected routes.",
    "Multi-database support with MySQL for production and SQLite for development.",
    "Advanced data grids supporting inline editing, bulk actions, undo/redo functionality in admin interfaces.",
    "Comprehensive API endpoints for all major features allowing public and authenticated access as appropriate."
  ],
  "user_flow_summary": [
    "Public user visits the portal, browses the Resource Hub, filters resources by categories, uses the AI Assistant for queries, and views club announcements without needing to login.",
    "Authenticated IT Prefects log in using their Google school accounts, access the Team Dashboard to view mission details, internal events, and training resources.",
    "IT Prefects manage tasks and events, update personal profiles, and adjust preferences securely.",
    "Admins log in and access the Admin Console where they manage users with batch editing and role assignments, create and sort resource categories with visual customization, manage articles and announcements, and configure system settings.",
    "Admins perform content updates and monitor analytics, ensuring system health and user engagement.",
    "Throughout all flows, users experience responsive design, smooth UI animations, and immediate feedback from system actions."
  ],
  "validation_criteria": [
    "All public APIs must respond correctly with expected data and support necessary filtering and pagination.",
    "Authentication and authorization must enforce role-based access control strictly for protected routes.",
    "Admin interfaces must support CRUD operations, inline editing, batch actions, and undo/redo with consistent data integrity.",
    "Resource Hub categories and resources must be properly linked, with click tracking functionality validated.",
    "AI Assistant must accept and respond to queries with appropriate error handling for service availability.",
    "Profile management must allow authenticated users to update information and securely change passwords with validation.",
    "System settings must be retrievable and updatable only by authorized admin users.",
    "Frontend must be fully responsive across desktop, tablet, and mobile devices and meet accessibility standards.",
    "Code must pass all quality checks including TypeScript validation and linting before deployment.",
    "Database migrations must be applied successfully and maintain data consistency across MySQL and SQLite environments."
  ],
  "code_summary": {
    "tech_stack": [
      "TypeScript",
      "Next.js 15",
      "React 18",
      "Tailwind CSS",
      "shadcn/ui",
      "Prisma ORM",
      "NextAuth.js",
      "MySQL/SQLite",
      "Zod",
      "React Hook Form",
      "Recharts",
      "React Data Grid"
    ],
    "features": [
      {
        "name": "Resource Hub API",
        "description": "Public API for accessing curated school resources organized by categories with click tracking",
        "files": [
          "app/api/resources/route.ts",
          "app/api/categories/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Resource Hub API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/resources": {
              "get": {
                "summary": "Get all active resources",
                "responses": {
                  "200": {
                    "description": "List of resources with category information"
                  }
                }
              }
            },
            "/api/categories": {
              "get": {
                "summary": "Get all active categories",
                "responses": {
                  "200": {
                    "description": "List of categories with resource counts"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "AI Chat Assistant API",
        "description": "Conversational AI support for campus navigation, schedules, and IT help",
        "files": [
          "app/api/chat/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "AI Chat API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/chat": {
              "post": {
                "summary": "Send message to AI assistant",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "messages": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "role": {
                                  "type": "string"
                                },
                                "content": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "AI response"
                  },
                  "400": {
                    "description": "Invalid request format"
                  },
                  "503": {
                    "description": "AI service not configured"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Training Library API",
        "description": "Multi-format training resources with categories and difficulty levels",
        "files": [
          "app/api/training/route.ts",
          "app/api/training/categories/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Training Library API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/training": {
              "get": {
                "summary": "Get all training resources",
                "responses": {
                  "200": {
                    "description": "List of training resources"
                  }
                }
              },
              "post": {
                "summary": "Create new training resource",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "responses": {
                  "201": {
                    "description": "Resource created successfully"
                  },
                  "401": {
                    "description": "Unauthorized"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Dashboard Tasks API",
        "description": "Team task management with assignments and priorities",
        "files": [
          "app/api/dashboard/tasks/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Dashboard Tasks API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/dashboard/tasks": {
              "get": {
                "summary": "Get tasks for user or all tasks for admins",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "responses": {
                  "200": {
                    "description": "List of tasks"
                  },
                  "401": {
                    "description": "Unauthorized"
                  }
                }
              },
              "post": {
                "summary": "Create new task",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "responses": {
                  "201": {
                    "description": "Task created successfully"
                  },
                  "401": {
                    "description": "Unauthorized"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Admin Resources API",
        "description": "Admin interface for managing resources and categories",
        "files": [
          "app/api/admin/resources/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Admin Resources API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/admin/resources": {
              "get": {
                "summary": "Get all resources for admin management",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "responses": {
                  "200": {
                    "description": "List of all resources"
                  },
                  "401": {
                    "description": "Unauthorized"
                  }
                }
              },
              "post": {
                "summary": "Create new resource",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "responses": {
                  "201": {
                    "description": "Resource created successfully"
                  },
                  "401": {
                    "description": "Unauthorized"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "System Health API",
        "description": "System health monitoring and status checks",
        "files": [
          "app/api/health/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Health API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/health": {
              "get": {
                "summary": "Get system health status",
                "responses": {
                  "200": {
                    "description": "System health information"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Notifications API",
        "description": "Real-time notification system for users",
        "files": [
          "app/api/notifications/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Notifications API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/notifications": {
              "get": {
                "summary": "Get user notifications",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "responses": {
                  "200": {
                    "description": "List of notifications"
                  },
                  "401": {
                    "description": "Unauthorized"
                  }
                }
              },
              "post": {
                "summary": "Create new notification",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "responses": {
                  "201": {
                    "description": "Notification created successfully"
                  },
                  "401": {
                    "description": "Unauthorized"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "System Settings API",
        "description": "System-wide settings and user preferences management",
        "files": [
          "app/api/settings/route.ts",
          "app/api/admin/settings/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Settings API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/settings": {
              "get": {
                "summary": "Get system settings",
                "responses": {
                  "200": {
                    "description": "System settings"
                  }
                }
              }
            },
            "/api/admin/settings": {
              "get": {
                "summary": "Get admin settings",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Admin settings"
                  },
                  "401": {
                    "description": "Unauthorized"
                  }
                }
              },
              "put": {
                "summary": "Update admin settings",
                "security": [
                  {
                    "bearerAuth": []
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Settings updated successfully"
                  },
                  "401": {
                    "description": "Unauthorized"
                  }
                }
              }
            }
          }
        }
      }
    ]
  }
}
