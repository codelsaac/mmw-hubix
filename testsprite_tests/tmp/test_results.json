[
  {
    "projectId": "bb03d4b0-a84f-4ee8-84ee-787e0cff786d",
    "testId": "39d4517b-3693-4814-9a76-b16dd89e62dc",
    "userId": "a438c4b8-0071-7028-f607-18383237ae36",
    "title": "TC001-get all active resources",
    "description": "Verify that the GET /api/resources endpoint returns a list of all active resources with correct category information, supports filtering and pagination, and responds with status 200.",
    "code": "import requests\nfrom requests.auth import HTTPBasicAuth\n\nBASE_URL = \"http://localhost:3000\"\nAUTH = HTTPBasicAuth(\"admin\", \"admin123\")\nTIMEOUT = 30\n\ndef test_get_all_active_resources():\n    url = f\"{BASE_URL}/api/resources\"\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n    params_list = [\n        {},  # no filter or pagination\n        {\"category\": \"education\"},\n        {\"page\": \"1\", \"limit\": \"5\"},\n        {\"category\": \"library\", \"page\": \"2\", \"limit\": \"3\"}\n    ]\n    for params in params_list:\n        response = requests.get(url, headers=headers, auth=AUTH, params=params, timeout=TIMEOUT)\n        assert response.status_code == 200, f\"Expected 200, got {response.status_code} for params {params}\"\n        json_data = response.json()\n        assert isinstance(json_data, list), f\"Response data is not a list for params {params}\"\n        # Validate each resource has expected fields including category info\n        for resource in json_data:\n            assert isinstance(resource, dict), \"Resource item is not an object\"\n            # Required fields (example, as typical for resource with category)\n            assert \"id\" in resource, \"Resource missing 'id' field\"\n            assert \"name\" in resource, \"Resource missing 'name' field\"\n            assert \"active\" in resource, \"Resource missing 'active' field\"\n            assert resource[\"active\"] is True, \"Resource 'active' field is not True\"\n            assert \"category\" in resource, \"Resource missing 'category' field\"\n            category = resource[\"category\"]\n            assert isinstance(category, dict), \"'category' field is not an object\"\n            assert \"id\" in category, \"Category missing 'id' field\"\n            assert \"name\" in category, \"Category missing 'name' field\"\n            # Optionally check category fields type\n            assert isinstance(category[\"id\"], (int, str)), \"Category 'id' is not int or str\"\n            assert isinstance(category[\"name\"], str), \"Category 'name' is not str\"\n\ntest_get_all_active_resources()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-18T11:18:12.824Z",
    "modified": "2025-10-18T11:18:36.523Z"
  },
  {
    "projectId": "bb03d4b0-a84f-4ee8-84ee-787e0cff786d",
    "testId": "e4b9c131-caa4-4e32-9c84-845ef19949df",
    "userId": "a438c4b8-0071-7028-f607-18383237ae36",
    "title": "TC002-get all active categories",
    "description": "Verify that the GET /api/categories endpoint returns a list of all active categories with accurate resource counts and responds with status 200.",
    "code": "import requests\n\ndef test_get_all_active_categories():\n    base_url = \"http://localhost:3000\"\n    endpoint = \"/api/categories\"\n    url = f\"{base_url}{endpoint}\"\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n\n    try:\n        response = requests.get(url, headers=headers, timeout=30)\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\n    assert response.status_code == 200, f\"Expected status 200, got {response.status_code}\"\n\n    try:\n        categories = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    assert isinstance(categories, list), \"Expected response to be a list of categories\"\n\n    for category in categories:\n        assert isinstance(category, dict), \"Each category should be a dictionary\"\n        assert 'id' in category, \"Category missing 'id'\"\n        assert 'name' in category, \"Category missing 'name'\"\n        # Validate resource counts\n        resource_count = category.get('resourceCount')\n        if resource_count is None:\n            resource_count = category.get('resource_count')\n        assert resource_count is not None, \"Category missing resource count\"\n        assert isinstance(resource_count, int), \"Resource count should be an integer and reflect accurate count\"\n\n    # Additional validation can be added here for accuracy if data available\n\ntest_get_all_active_categories()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 38, in <module>\n  File \"<string>\", line 33, in test_get_all_active_categories\nAssertionError: Category missing resource count\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-18T11:18:12.831Z",
    "modified": "2025-10-18T11:19:19.717Z"
  },
  {
    "projectId": "bb03d4b0-a84f-4ee8-84ee-787e0cff786d",
    "testId": "3a2c27fe-29a5-4760-ac03-1c0a53941a04",
    "userId": "a438c4b8-0071-7028-f607-18383237ae36",
    "title": "TC003-send message to ai assistant",
    "description": "Verify that the POST /api/chat endpoint accepts a valid message payload, returns an AI-generated response with status 200, handles invalid request formats with status 400, and returns status 503 if the AI service is not configured.",
    "code": "import requests\nfrom requests.auth import HTTPBasicAuth\n\nBASE_URL = \"http://localhost:3000\"\nAUTH = HTTPBasicAuth(\"admin\", \"admin123\")\nHEADERS = {\"Content-Type\": \"application/json\"}\nTIMEOUT = 30\n\ndef test_send_message_to_ai_assistant():\n    url = f\"{BASE_URL}/api/chat\"\n\n    # Valid payload for success case\n    valid_payload = {\n        \"messages\": [\n            {\n                \"role\": \"user\",\n                \"content\": \"Hello, how can you assist me today?\"\n            }\n        ]\n    }\n\n    # Invalid payload for 400 case (missing 'messages' array)\n    invalid_payload = {\n        \"msg\": \"This is an invalid format\"\n    }\n\n    # Test success response 200\n    try:\n        response = requests.post(url, json=valid_payload, auth=AUTH, headers=HEADERS, timeout=TIMEOUT)\n        assert response.status_code == 200 or response.status_code == 503, f\"Expected status 200 or 503, got {response.status_code}\"\n        if response.status_code == 200:\n            # Validate response json structure loosely (AI response expected)\n            json_data = response.json()\n            assert isinstance(json_data, dict), \"Response is not a JSON object\"\n            # We expect some content in response, e.g., an AI-generated message\n            # At minimum, ensure keys exist or content type is appropriate\n            # Since schema not fully defined for response, check presence of keys or string response\n            assert \"response\" in json_data or len(json_data) > 0, \"AI response content missing\"\n        elif response.status_code == 503:\n            # AI service not configured - valid error scenario\n            json_data = response.json()\n            assert isinstance(json_data, dict), \"503 response is not JSON\"\n            # A message or error field might be present\n            assert \"message\" in json_data or \"error\" in json_data, \"503 response missing message or error field\"\n    except Exception as e:\n        raise AssertionError(f\"Error on valid message test: {e}\")\n\n    # Test invalid payload returns 400\n    try:\n        response = requests.post(url, json=invalid_payload, auth=AUTH, headers=HEADERS, timeout=TIMEOUT)\n        assert response.status_code == 400, f\"Expected status 400 for invalid payload, got {response.status_code}\"\n    except Exception as e:\n        raise AssertionError(f\"Error on invalid message format test: {e}\")\n\ntest_send_message_to_ai_assistant()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-18T11:18:12.836Z",
    "modified": "2025-10-18T11:18:39.995Z"
  },
  {
    "projectId": "bb03d4b0-a84f-4ee8-84ee-787e0cff786d",
    "testId": "1a1b062a-bb74-4318-a7e6-d7703ddcb326",
    "userId": "a438c4b8-0071-7028-f607-18383237ae36",
    "title": "TC004-get all training resources",
    "description": "Verify that the GET /api/training endpoint returns a list of all training resources with status 200.",
    "code": "import requests\nfrom requests.auth import HTTPBasicAuth\n\ndef test_get_all_training_resources():\n    base_url = \"http://localhost:3000\"\n    endpoint = f\"{base_url}/api/training\"\n    auth = HTTPBasicAuth('admin', 'admin123')\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n    timeout = 30\n\n    try:\n        response = requests.get(endpoint, headers=headers, auth=auth, timeout=timeout)\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\n    assert response.status_code == 200, f\"Expected status code 200 but got {response.status_code}\"\n    try:\n        data = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    assert isinstance(data, list), \"Response JSON is not a list of training resources\"\n\ntest_get_all_training_resources()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-18T11:18:12.841Z",
    "modified": "2025-10-18T11:18:50.785Z"
  },
  {
    "projectId": "bb03d4b0-a84f-4ee8-84ee-787e0cff786d",
    "testId": "18f41ce2-20b1-4e74-a2eb-31c53ea9e219",
    "userId": "a438c4b8-0071-7028-f607-18383237ae36",
    "title": "TC005-create new training resource",
    "description": "Verify that the POST /api/training endpoint allows authenticated users to create a new training resource, responds with status 201 on success, and returns status 401 for unauthorized access.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3000\"\nTIMEOUT = 30\n\n# Replace this token with a valid bearer token before running the test\nBEARER_TOKEN = \"example_admin_token\"\n\n\ndef test_create_new_training_resource():\n    url = f\"{BASE_URL}/api/training\"\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": f\"Bearer {BEARER_TOKEN}\"\n    }\n\n    # Sample payload for creating a new training resource\n    payload = {\n        \"title\": \"Test Training Resource\",\n        \"description\": \"This is a test training resource created during automated testing.\",\n        \"category\": \"Testing\",\n        \"difficulty\": \"Beginner\",\n        \"content\": \"https://example.com/training-content\",\n        \"format\": \"video\"\n    }\n\n    # Test unauthorized access (no auth)\n    try:\n        resp_unauth = requests.post(url, json=payload, headers={\"Content-Type\": \"application/json\"}, timeout=TIMEOUT)\n        assert resp_unauth.status_code == 401, f\"Expected 401 for unauthorized, got {resp_unauth.status_code}\"\n    except requests.RequestException as e:\n        assert False, f\"Unauthorized request failed: {e}\"\n\n    # Test authorized creation\n    resource_id = None\n    try:\n        resp = requests.post(url, json=payload, headers=headers, timeout=TIMEOUT)\n        assert resp.status_code == 201, f\"Expected 201 Created, got {resp.status_code}\"\n        data = resp.json()\n        resource_id = data.get(\"id\")\n        assert resource_id is not None, \"Response JSON does not contain 'id' of created resource\"\n    except requests.RequestException as e:\n        assert False, f\"Authorized request failed: {e}\"\n\n    finally:\n        if resource_id:\n            delete_url = f\"{url}/{resource_id}\"\n            try:\n                del_resp = requests.delete(delete_url, headers={\"Authorization\": f\"Bearer {BEARER_TOKEN}\"}, timeout=TIMEOUT)\n                if del_resp.status_code not in (200, 204, 404):\n                    print(f\"Warning: Unexpected status code on delete: {del_resp.status_code}\")\n            except requests.RequestException:\n                print(\"Warning: Failed to delete created training resource during cleanup.\")\n\n\ntest_create_new_training_resource()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 56, in <module>\n  File \"<string>\", line 38, in test_create_new_training_resource\nAssertionError: Expected 201 Created, got 401\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-18T11:18:12.847Z",
    "modified": "2025-10-18T11:19:19.719Z"
  },
  {
    "projectId": "bb03d4b0-a84f-4ee8-84ee-787e0cff786d",
    "testId": "cd9785af-54ba-4c93-bdd3-52b018057ad2",
    "userId": "a438c4b8-0071-7028-f607-18383237ae36",
    "title": "TC006-get tasks for user or all tasks for admins",
    "description": "Verify that the GET /api/dashboard/tasks endpoint returns tasks assigned to the authenticated user or all tasks if the user is an admin, responds with status 200, and returns status 401 for unauthorized access.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3000\"\nTASKS_ENDPOINT = \"/api/dashboard/tasks\"\nTIMEOUT = 30\n\n# Simulated bearer token for testing (should be replaced with real token acquisition in real test)\nBEARER_TOKEN = \"valid_token_example\"\n\ndef test_get_tasks_for_user_or_admin():\n    headers = {\n        \"Accept\": \"application/json\",\n    }\n\n    # 1) Test unauthorized access returns 401\n    try:\n        response_unauth = requests.get(\n            BASE_URL + TASKS_ENDPOINT,\n            headers=headers,\n            timeout=TIMEOUT\n        )\n        assert response_unauth.status_code == 401, (\n            f\"Expected status 401 for unauthorized access, got {response_unauth.status_code}\"\n        )\n    except requests.RequestException as e:\n        assert False, f\"Request exception during unauthorized access test: {e}\"\n\n    # 2) Test authorized admin user gets status 200 and tasks list\n    auth_headers = headers.copy()\n    auth_headers[\"Authorization\"] = f\"Bearer {BEARER_TOKEN}\"\n\n    try:\n        response_auth = requests.get(\n            BASE_URL + TASKS_ENDPOINT,\n            headers=auth_headers,\n            timeout=TIMEOUT\n        )\n    except requests.RequestException as e:\n        assert False, f\"Request exception during authorized access test: {e}\"\n\n    assert response_auth.status_code == 200, (\n        f\"Expected status 200 for authorized admin access, got {response_auth.status_code}\"\n    )\n\n    try:\n        tasks_data = response_auth.json()\n    except ValueError:\n        assert False, \"Response for authorized admin access is not valid JSON\"\n\n    assert isinstance(tasks_data, (list, dict)), (\n        \"Response JSON should be a list or a dictionary representing tasks\"\n    )\n\n    if isinstance(tasks_data, list) and len(tasks_data) > 0:\n        sample_task = tasks_data[0]\n        assert isinstance(sample_task, dict), \"Each task item should be a dictionary\"\n        expected_keys = {\"id\", \"title\", \"description\", \"assignedTo\", \"priority\", \"status\"}\n        assert expected_keys.intersection(sample_task.keys()), (\n            \"Task object missing expected keys, got keys: \" + \", \".join(sample_task.keys())\n        )\n\ntest_get_tasks_for_user_or_admin()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 62, in <module>\n  File \"<string>\", line 41, in test_get_tasks_for_user_or_admin\nAssertionError: Expected status 200 for authorized admin access, got 401\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-18T11:18:12.851Z",
    "modified": "2025-10-18T11:19:19.707Z"
  },
  {
    "projectId": "bb03d4b0-a84f-4ee8-84ee-787e0cff786d",
    "testId": "e13bfc96-cde0-4d9d-bc43-fa34a43e1af7",
    "userId": "a438c4b8-0071-7028-f607-18383237ae36",
    "title": "TC007-create new task",
    "description": "Verify that the POST /api/dashboard/tasks endpoint allows authenticated users to create a new task, responds with status 201 on success, and returns status 401 for unauthorized access.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3000\"\nENDPOINT = \"/api/dashboard/tasks\"\nTIMEOUT = 30\n\n# Replace this with a valid JWT or bearer token for the authorized user\nBEARER_TOKEN = \"your_valid_bearer_token_here\"\n\n\ndef test_create_new_task():\n    # Payload for creating a new task - example minimal valid payload\n    new_task_payload = {\n        \"title\": \"Test Task Title\",\n        \"description\": \"This is a test task created during automated testing.\",\n        \"priority\": \"medium\",\n        \"assignee\": \"admin\"\n    }\n\n    # Headers for unauthorized request\n    headers_unauth = {\n        \"Content-Type\": \"application/json\"\n    }\n\n    # Headers for authorized request with Bearer token\n    headers_auth = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": f\"Bearer {BEARER_TOKEN}\"\n    }\n\n    # First test unauthorized access (no auth)\n    try:\n        response_unauth = requests.post(\n            f\"{BASE_URL}{ENDPOINT}\",\n            json=new_task_payload,\n            headers=headers_unauth,\n            timeout=TIMEOUT\n        )\n    except requests.RequestException as e:\n        assert False, f\"Unauthorized request failed with exception: {e}\"\n    assert response_unauth.status_code == 401, f\"Expected 401 Unauthorized, got {response_unauth.status_code}\"\n\n    # Then test authorized access to create a new task\n    try:\n        response_auth = requests.post(\n            f\"{BASE_URL}{ENDPOINT}\",\n            json=new_task_payload,\n            headers=headers_auth,\n            timeout=TIMEOUT\n        )\n    except requests.RequestException as e:\n        assert False, f\"Authorized request failed with exception: {e}\"\n\n    assert response_auth.status_code == 201, f\"Expected 201 Created, got {response_auth.status_code}\"\n    created_task = response_auth.json()\n    assert \"id\" in created_task and isinstance(created_task[\"id\"], (int, str)), \"Created task ID is missing or invalid\"\n    assert created_task.get(\"title\") == new_task_payload[\"title\"], \"Task title does not match\"\n    assert created_task.get(\"description\") == new_task_payload[\"description\"], \"Task description does not match\"\n    assert created_task.get(\"priority\") == new_task_payload[\"priority\"], \"Task priority does not match\"\n    assert created_task.get(\"assignee\") == new_task_payload[\"assignee\"], \"Task assignee does not match\"\n\n    # Cleanup - delete the created task if ID is available\n    task_id = created_task.get(\"id\")\n    if task_id:\n        try:\n            delete_response = requests.delete(\n                f\"{BASE_URL}{ENDPOINT}/{task_id}\",\n                headers={\"Authorization\": f\"Bearer {BEARER_TOKEN}\"},\n                timeout=TIMEOUT\n            )\n            # Allow 200 or 204 on delete success\n            assert delete_response.status_code in [200, 204], f\"Failed to delete test task, status code: {delete_response.status_code}\"\n        except requests.RequestException as e:\n            # Log error but do not fail test for cleanup failure\n            print(f\"Warning: Failed to delete test task with id {task_id}. Exception: {e}\")\n\n\ntest_create_new_task()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 78, in <module>\n  File \"<string>\", line 54, in test_create_new_task\nAssertionError: Expected 201 Created, got 401\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-18T11:18:12.856Z",
    "modified": "2025-10-18T11:19:23.230Z"
  },
  {
    "projectId": "bb03d4b0-a84f-4ee8-84ee-787e0cff786d",
    "testId": "79bf7f74-c564-4a3c-967b-784a028cc0c6",
    "userId": "a438c4b8-0071-7028-f607-18383237ae36",
    "title": "TC008-get all resources for admin management",
    "description": "Verify that the GET /api/admin/resources endpoint returns a list of all resources for admin management, requires authentication, responds with status 200, and returns status 401 for unauthorized access.",
    "code": "import requests\nfrom requests.auth import HTTPBasicAuth\n\nBASE_URL = \"http://localhost:3000\"\nADMIN_RESOURCES_ENDPOINT = \"/api/admin/resources\"\nTIMEOUT = 30\n\nUSERNAME = \"admin\"\nPASSWORD = \"admin123\"\n\n\ndef test_get_all_resources_for_admin_management():\n    # Test unauthorized access (no auth)\n    try:\n        response_unauth = requests.get(\n            f\"{BASE_URL}{ADMIN_RESOURCES_ENDPOINT}\",\n            timeout=TIMEOUT\n        )\n        assert response_unauth.status_code == 401, (\n            f\"Expected status 401 for unauthorized access, got {response_unauth.status_code}\"\n        )\n    except requests.RequestException as e:\n        assert False, f\"Request failed during unauthorized access test: {e}\"\n\n    # Test authorized access (basic auth)\n    try:\n        response_auth = requests.get(\n            f\"{BASE_URL}{ADMIN_RESOURCES_ENDPOINT}\",\n            auth=HTTPBasicAuth(USERNAME, PASSWORD),\n            timeout=TIMEOUT\n        )\n        assert response_auth.status_code == 200, (\n            f\"Expected status 200 for authorized access, got {response_auth.status_code}\"\n        )\n        # Further validate that response content is a list (likely JSON array)\n        data = response_auth.json()\n        assert isinstance(data, list), f\"Response JSON is not a list, got {type(data)}\"\n    except requests.RequestException as e:\n        assert False, f\"Request failed during authorized access test: {e}\"\n    except ValueError as e:\n        assert False, f\"Response is not valid JSON: {e}\"\n\n\ntest_get_all_resources_for_admin_management()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 44, in <module>\n  File \"<string>\", line 19, in test_get_all_resources_for_admin_management\nAssertionError: Expected status 401 for unauthorized access, got 403\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-18T11:18:12.861Z",
    "modified": "2025-10-18T11:18:59.145Z"
  },
  {
    "projectId": "bb03d4b0-a84f-4ee8-84ee-787e0cff786d",
    "testId": "b808c77d-5c44-41b2-8cef-ac98c0b7fdef",
    "userId": "a438c4b8-0071-7028-f607-18383237ae36",
    "title": "TC009-create new resource",
    "description": "Verify that the POST /api/admin/resources endpoint allows authenticated admin users to create a new resource, responds with status 201 on success, and returns status 401 for unauthorized access.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3000\"\nADMIN_RESOURCES_ENDPOINT = f\"{BASE_URL}/api/admin/resources\"\nTIMEOUT = 30\n\n# Use a placeholder bearer token for the admin user\nBEARER_TOKEN = \"fake-admin-token\"\n\n\ndef test_create_new_resource():\n    # Sample payload for creating a new resource\n    resource_payload = {\n        \"title\": \"Test Resource Title\",\n        \"description\": \"A description for the test resource\",\n        \"url\": \"https://example.com/resource\",\n        \"categoryId\": 1,\n        \"active\": True\n    }\n\n    # Attempt to create resource without authentication - expect 403 Forbidden\n    try:\n        response_unauth = requests.post(\n            ADMIN_RESOURCES_ENDPOINT,\n            json=resource_payload,\n            timeout=TIMEOUT\n        )\n    except requests.RequestException as e:\n        assert False, f\"Request failed for unauthorized access test: {e}\"\n    else:\n        assert response_unauth.status_code == 403, (\n            f\"Expected 403 Forbidden for unauthenticated request, got {response_unauth.status_code}\"\n        )\n\n    # Attempt to create resource with bearer token authentication - expect 201 Created\n    resource_id = None\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": f\"Bearer {BEARER_TOKEN}\"\n    }\n    try:\n        response_auth = requests.post(\n            ADMIN_RESOURCES_ENDPOINT,\n            json=resource_payload,\n            headers=headers,\n            timeout=TIMEOUT\n        )\n        assert response_auth.status_code == 201, (\n            f\"Expected 201 Created for authenticated request, got {response_auth.status_code}\"\n        )\n\n        # Validate response contains resource id or similar identifier\n        try:\n            response_data = response_auth.json()\n        except ValueError:\n            assert False, \"Response content is not valid JSON\"\n\n        # Expecting at least an \"id\" field in created resource response\n        assert isinstance(response_data, dict), \"Response JSON is not an object\"\n        assert \"id\" in response_data, \"Response JSON does not contain 'id'\"\n\n        resource_id = response_data[\"id\"]\n        assert isinstance(resource_id, (int, str)), \"'id' field should be int or str\"\n\n    finally:\n        # Clean up: delete the created resource if creation succeeded\n        if resource_id is not None:\n            delete_url = f\"{ADMIN_RESOURCES_ENDPOINT}/{resource_id}\"\n            try:\n                del_response = requests.delete(\n                    delete_url,\n                    headers={\"Authorization\": f\"Bearer {BEARER_TOKEN}\"},\n                    timeout=TIMEOUT\n                )\n                # Deletion success codes can be 200 or 204\n                assert del_response.status_code in (200, 204), (\n                    f\"Failed to delete resource with id {resource_id}, status code: {del_response.status_code}\"\n                )\n            except requests.RequestException as e:\n                assert False, f\"Request failed during cleanup deletion: {e}\"\n\n\ntest_create_new_resource()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 83, in <module>\n  File \"<string>\", line 48, in test_create_new_resource\nAssertionError: Expected 201 Created for authenticated request, got 403\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-18T11:18:12.867Z",
    "modified": "2025-10-18T11:19:36.122Z"
  },
  {
    "projectId": "bb03d4b0-a84f-4ee8-84ee-787e0cff786d",
    "testId": "045d4a74-2e45-4b82-9378-c54f29579289",
    "userId": "a438c4b8-0071-7028-f607-18383237ae36",
    "title": "TC010-get system health status",
    "description": "Verify that the GET /api/health endpoint returns the current system health status with status 200.",
    "code": "import requests\n\ndef test_get_system_health_status():\n    base_url = \"http://localhost:3000\"\n    endpoint = \"/api/health\"\n    url = base_url + endpoint\n\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n\n    try:\n        response = requests.get(url, headers=headers, timeout=30)\n        # Check for successful response status code 200\n        assert response.status_code == 200, f\"Expected status 200, got {response.status_code}\"\n        # Validate that response content is JSON and has expected keys\n        data = response.json()\n        assert isinstance(data, dict), \"Response is not a JSON object\"\n        # We don't have schema details for health response, but expect at least some keys\n        assert len(data) > 0, \"Response JSON is empty\"\n    except requests.exceptions.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\ntest_get_system_health_status()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 24, in <module>\n  File \"<string>\", line 15, in test_get_system_health_status\nAssertionError: Expected status 200, got 503\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-18T11:18:12.872Z",
    "modified": "2025-10-18T11:19:23.232Z"
  }
]
